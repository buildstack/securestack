#!/bin/bash
# Written by Paul McCarty <paulm@securestack.com.au> #

stop_ubuntu () {
        sudo /var/ossec/bin/ossec-control stop
        # Daemons to manage go here #
        daemons=(
                wazuh-manager
                wazuh-agent
                fail2ban
                filebeat
                metricbeat
                logstash
                kibana
                elasticsearch
                maldet
                clamav-daemon
                clamav-freshclam
                nginx
                wazuh-api
        )

        for i in "${daemons[@]}"
        do
                echo "Disabling $i" && sudo systemctl stop $i && sudo systemctl disable $i
        done
}

stop_el () {
	sudo /var/ossec/bin/ossec-control stop
	# Daemons to manage go here #
	daemons=(
		wazuh-manager
		wazuh-agent
		fail2ban
        	filebeat
        	metricbeat
		logstash
		kibana
		elasticsearch
		maldet
                clamd@scan
		nginx
                wazuh-api
	)

	for i in "${daemons[@]}"
	do
        	sudo rpm -qa | grep -q $i && echo "Disabling $i" && sudo systemctl stop $i && sudo systemctl disable $i
	done
	sudo rpm -qa | grep -q clamav-scanner && echo "Disabling clamd@scan" && sudo systemctl stop clamd@scan && sudo systemctl disable clamd@scan
}

start () {
	if [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 server) -eq 1 ]; then
		echo "SecureStack Role is SERVER"
		echo "Starting Wazuh, Elasticsearch, Logstash, Kibana, Filebeat and Metricbeat"
        	sudo systemctl start wazuh-manager && sudo systemctl enable wazuh-manager
        	sudo systemctl start wazuh-api && sudo systemctl enable wazuh-api
        	sudo systemctl start nginx && sudo systemctl enable nginx
        	sudo systemctl start elasticsearch && sudo systemctl enable elasticsearch
        	sudo systemctl start logstash && sudo systemctl enable logstash
        	sudo systemctl start kibana && sudo systemctl enable kibana 
        	sudo systemctl start filebeat && sudo systemctl enable filebeat
        	sudo systemctl start metricbeat && sudo systemctl enable metricbeat
        # Get IP information
        echo " "
        echo "============================================================================================================================================"
        echo "As a general rule we suggest that you don't allow access to the Web UI from the internet at all.  But, in the absence of a VPN or some other"
        echo "way to connect using the local IP address you will need to create a Security Group in AWS that allows access to HTTP (tcp 80) from your IP"
        echo "address.  You will need to do this before you can connect successfully.  During the configuration you should have created a white_list of"
        echo "known good IP source addresses.  Any addresses on the white_list were given access to HTTP (tcp 80)."
        echo "============================================================================================================================================"
        echo " "
        echo "If you've allowed http access to the internet you can login to the SecureStack Web UI at http://$(curl -s icanhazip.com)"
        echo "Otherwise you can login to the SecureStack Web UI at http://$(ifconfig eth0|grep inet|awk '{print $2}')"
        echo " "
        echo "============================================================================================================================================"

	elif [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 hardened) -eq 1 ]; then
		echo "SecureStack Role is HARDENED"
		echo "Starting wazuh-agent..."; sudo systemctl start wazuh-agent && sudo systemctl enable wazuh-agent
			if [ $(grep 'fail2ban:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
				echo "Enabling fail2ban..." && sudo systemctl start fail2ban && sudo systemctl enable fail2ban
			else echo "Disabling fail2ban..." && sudo systemctl stop fail2ban && sudo systemctl disable fail2ban
			fi
			if [ $(grep 'clamav:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                        	echo "Enabling clamav..." && sudo systemctl start clamd@scan && sudo systemctl enable clamd@scan 
			else echo "Disabling clamav..." && sudo systemctl stop clamd@scan && sudo systemctl disable clamd@scan
			fi
			if [ $(grep 'maldet:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
				echo "Adding /mnt /media /opt/securestack to maldet monitor dirs." && sudo /usr/local/sbin/maldet --monitor users && sudo /usr/local/sbin/maldet --monitor /mnt,/media
				grep "/opt/securestack" /usr/local/maldetect/monitor_paths || echo '/opt/securestack' >> /usr/local/maldetect/monitor_paths
                                echo "Enabling Linux Malware Detect..." && sudo systemctl start maldet && sudo systemctl enable maldet
                        else echo "Disabling maldet..." && sudo systemctl stop maldet && sudo systemctl disable maldet
                        fi	
			if [ $(grep 'metricbeat:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                                echo "Enabling Metricbeat..." && sudo systemctl start metricbeat && sudo systemctl enable metricbeat
                        else echo "Disabling metricbeat..." && sudo systemctl stop metricbeat && sudo systemctl disable metricbeat
                        fi
			if [ $(grep 'filebeat:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                                echo "Enabling Filebeat..." && sudo systemctl start filebeat && sudo systemctl enable filebeat
                        else echo "Disabling Filebeat..." && sudo systemctl stop filebeat && sudo systemctl disable filebeat
                        fi
		
	elif [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 naked) -eq 1 ]; then
        	echo "SecureStack Role is NAKED"
        	echo "Not doing anything."
	fi
	
}

agent () {
        case "$2" in
                [lL][iI][sS][tT]|[lL])
                        echo "Listing all SecureStack agents... "
                        sudo /var/ossec/bin/agent_control -l
                        ;;
                [aA][cC][tT][iI][vV][eE]|[aA])
                        echo "Listing all SecureStack active agents... "
                        sudo /var/ossec/bin/agent_control -lc
                        ;;
                [iI][nN][fF][oO]|[iI])
			if [[ $3 -ge 1 ]]; then
                                sudo /var/ossec/bin/agent_control -i $3;
                                exit 0;
                        elif [ -z $3 ]; then
                                echo "Which agents do you want to get info for? "
                                exit 0;
                        fi
                        ;;
                [rR][eE][sS][tT][aA][rR][tT]|[rR])
                        if [[ $3 = 'all' ]]; then
                                sudo /var/ossec/bin/agent_control -Ra;
                                exit 0;
                        elif [ -z $3 ]; then
                                echo "Which agents do you want to restart?  If you want to restart all instances type all."
                                echo "Otherwise if you want to restart a specific server supply its agent id."
                                exit 0;
                        elif [ $3 -ge 1 ]; then
                                sudo /var/ossec/bin/agent_control -R -u $3;
                                exit 0;
                        fi
                        ;;
                 [sS][cC][aA][nN]|[sS])
                        if [[ $3 = 'all' ]]; then
                                sudo /var/ossec/bin/agent_control -ra;
                                exit 0;
                        elif [ -z $3 ]; then
                                echo "Which agents do you want to scan?  If you want to scan all instances type all."
                                echo "Otherwise if you want to scan a specific server supply its agent id."
                                exit 0;
                        elif [ $3 -ge 1 ]; then
                                sudo /var/ossec/bin/agent_control -r -u $3;
                                exit 0;
                        fi
                        ;;
                *)
                        echo "Must supply verb.  Example:  securestack agent (list|restart|active|scan|info)"; exit 0
                        ;;
        esac

}

configure_networking_server () {
	echo "******************************************************************************"
	echo "############ local_net section #######################################"
        echo "What subnets do you want to have access to this SecureStack server?"
	echo "If you are deploying to AWS this is usually the main IPv4 CIDR block attached to your VPC"
	echo "or you can specify individual subnets but this will limit what instances can talk to this"
	echo "SecureStack server."
        echo "Please include all networks that will be managed by this particular instance of SecureStack."
	echo "Enter subnets here:  "; read -a local_net

	echo "******************************************************************************"
	echo "############ white_list section ######################################"
	echo "This is where you define what IP addresses or networks you want to have administrative"
	echo "access to this SecureStack server.  This access is limited to http for nginx and"
	echo "tcp 22 for ssh.  Please be careful as you can lock yourself out of your server if you"
	echo "enter the wrong values here.  You can cancel by hitting Ctrl-C now which will leave ssh"
	echo "open but you won't be able to use the web UI until you define this access."
	echo "---- Hit Ctrl-C now to exit or any key to continue -------------------"; read 
        echo "Define your whitelist ips here: "; read -a white_list
	echo "******************************************************************************"
	echo "Deleting existing firewall rules..."
	sudo ufw --force reset
	sudo ufw --force enable
	echo "******************************************************************************"

        for subnets in ${local_net[@]}
        do
                sudo ufw allow proto tcp from $subnets to any port 1514
                sudo ufw allow proto tcp from $subnets to any port 1515
        done

	for ip in ${white_list[@]}
	do
  		sudo ufw allow proto tcp from $ip to any port 22
  		sudo ufw allow proto tcp from $ip to any port 80
	done

	echo "******************************************************************************"
	echo "Removing inital ssh rule..."
	sudo ufw --force delete 1
	echo "******************************************************************************"
}

configure_networking_base () {
        echo "******************************************************************************"
        echo "############ white_list section ######################################"
        echo "This is where you define what IP addresses or networks you want to have administrative"
        echo "access to this SecureStack server.  This access is limited to"
        echo "tcp 22 for ssh.  Please be careful as you can lock yourself out of your server if you"
        echo "enter the wrong values here.  You can cancel by hitting Ctrl-C now which will leave ssh"
        echo "open but you won't be able to use the web UI until you define this access."
        echo "---- Hit Ctrl-C now to exit or any key to continue -------------------"; read
        echo "Define your whitelist ips here: "; read -a white_list
        echo "******************************************************************************"
        echo "Deleting existing firewall rules..."
        sudo ufw --force reset
        sudo ufw --force enable
        echo "******************************************************************************"

        for ip in ${white_list[@]}
        do
                sudo ufw allow proto tcp from $ip to any port 22
        done

        echo "******************************************************************************"
        echo "Removing inital ssh rule..."
        sudo ufw --force delete 1
        echo "******************************************************************************"
}

create_user () {
	read -p "Do you want to create a new user for the web ui? [y/N] : " nginx_create
        case "$nginx_create" in
                [yY][eE][sS]|[yY])
			read -p "What is the new username? " nginx_user
                        echo "Enter the new password? "; read -s nginx_pass
                        sudo htpasswd -cb /etc/nginx/htpasswd.users $nginx_user $nginx_pass || echo "No htpasswd found.  This command only works on Server instances"
                        unset nginx_pass
                        ;;
                *)
                        echo "Cancelling new user creation."
                        ;;
        esac

	#nginx_pass=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w64 | head -n1) 
}	

configure_apps () {
	echo "******************************************************************************"
    	read -p "Do you want to enable clamav anti-virus?  [y/N] : " clamav_ans
        read -p "Do you want to enable Linux Malware Detect (LMD/maldet)?  [y/N] : " maldet_ans
        read -p "Do you want to enable fail2ban?  [Y/n] : " fail2ban_ans
        if [ $role != 'server' ]; then read -p "Do you want to enable Metricbeat?  [y/N] : " metricbeat_ans; fi
        if [ $role != 'server' ]; then read -p "Do you want to enable Filebeat?  [y/N] : " filebeat_ans; fi
	#read -p "Do you want to enable Web Application Firewall? [y/N] " waf_ans
	#read -p "Do you want to enable Rootkit Hunter? [Y/n] " rkhunter_ans
	echo "******************************************************************************"
	# clamav section
	case "$clamav_ans" in
    		[yY][eE][sS]|[yY]) 
        		sed -i "s/^clamav:.*/clamav: 'enabled'/g" /opt/securestack/securestack.yml
        		;;
    		*)
        		sed -i "s/^clamav:.*/clamav: 'disabled'/g" /opt/securestack/securestack.yml
        		;;
	esac
	
	# maldet section
        case "$maldet_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^maldet:.*/maldet: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^maldet:.*/maldet: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

        # fail2ban section
        case "$fail2ban_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^fail2ban:.*/fail2ban: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^fail2ban:.*/fail2ban: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

        # metricbeat section
        case "$metricbeat_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^metricbeat:.*/metricbeat: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^metricbeat:.*/metricbeat: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

	# filebeat section
        case "$filebeat_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^filebeat:.*/filebeat: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^filebeat:.*/filebeat: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac
	
	if [ $role = 'server' ]; then sed -i "s/^filebeat:.*/filebeat: 'enabled'/g" /opt/securestack/securestack.yml; fi
	if [ $role = 'server' ]; then sed -i "s/^metricbeat:.*/metricbeat: 'enabled'/g" /opt/securestack/securestack.yml; fi
	
		
}

profile() {
	export ANSIBLE_HOST_KEY_CHECKING=False
	case "$2" in
                [nN][eE][wW]|[nN])
		echo "You are creating a new profile"
                        read -p "Which provider? Choices are: ec2, gce, azure, ali, vmware.  " provider_ans
		;;
	esac
}

provision() {
	timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
	export ANSIBLE_HOST_KEY_CHECKING=False
	case "$2" in
                [iI][nN][tT]|[iI])
                        read -p "AWS access key?  " aws_access_key_ans
                        read -p "AWS secret key?  " aws_secret_key_ans
                        read -p "Hostname?  " hostname_ans
                        read -p "Local Network?  " local_net_ans
                        read -p "Subnet?  " vpc_subnet_id_ans
                        read -p "Security Groups?  " group_id_ans
                        read -p "SecureStack Server IP Address?  " server_ip_ans
                        read -p "authd password?  " authd_pass_ans
			export ANSIBLE_HOST_KEY_CHECKING=False
			echo "**************************************************************************"
			echo "AWS access key 		= $aws_access_key_ans"
			echo "AWS secret key 		= $aws_secret_key_ans"
			echo "Hostname			= $hostname_ans"
			echo "Local Network		= $local_net_ans"
			echo "Subnet			= $vpc_subnet_id_ans"
			echo "Security Group(s)		= $group_id_ans"
			echo "Server IP Address 	= $server_ip_ans"
			echo "Authd Password		= $authd_pass_ans"
			echo "**************************************************************************"
			echo "Everything look good?  If so, hit enter.  Otherwise Cntl-C to exit."
			read
                        ansible-playbook $HOME/ansible/launch_securestack_ami.yml -e "local_net=$local_net_ans ossec_server_ip=$server_ip_ans authd_password=$authd_pass_ans hostname=$hostname_ans" \
                                -e "aws_access_key=$aws_access_key_ans aws_secret_key=$aws_secret_key_ans vpc_subnet_id=$vpc_subnet_id_ans group_id=$group_id_ans"
                        ;;
		[hH][oO][sS][tT]|[hH][oO][sS][tT][nN][aA][mM][eE])
                        export ANSIBLE_HOST_KEY_CHECKING=False
                        ansible-playbook $HOME/ansible/launch_securestack_ami.yml -e "host_key_checking=False hostname=$3"
                        ;;
                [pP][rR][oO][fF]|[pP][rR][oO][fF][iI][lL][eE])
                        if [ $4 = 'hostname' ]; then
                                if [ -z $5 ]; then
                                        echo "Must supply hostname.  Example:  securestack provision profile default hostname test-server01"; exit 0
                                fi
                                export ANSIBLE_HOST_KEY_CHECKING=False
                                ansible-playbook $HOME/ansible/launch_securestack_profile.yml -e "host_key_checking=False hostname=$5 remote_user=securestack profile=$3"

                        else
                                echo "Must supply hostname.  Example:  securestack provision profile default hostname test-server01"; exit 0
                        fi
                        ;;
                *)
			export ANSIBLE_HOST_KEY_CHECKING=False
                        ansible-playbook $HOME/ansible/launch_securestack_ami.yml -e "host_key_checking=False hostname=securestack-base-$timestamp"
                        ;;
        esac

}

mfa() {
	read -p "Do you want to install Kryptonite Multi Factor Authentication?  " krypt_ans	
	command -v kr && echo "Kryptonite is already installed.  Exiting... " && exit
	case "$krypt_ans" in
            [yY][eE][sS]|[yY])
                gpg --keyserver=hkp://pgp.mit.edu:80 --recv-keys "C4A05888A1C4FA02E1566F859F2A29A569653940"
		gpg --export --armor C4A05888A1C4FA02E1566F859F2A29A569653940 > /tmp/kryptco.key
		sudo rpm --import /tmp/kryptco.key
		sudo yum-config-manager --add-repo https://kryptco.github.io/yum
		sudo rm -rf /tmp/kryptco.key
		sudo yum install kr -y
                ;;
            *)
                echo "Cancelling new MFA creation."
                ;;
        esac
}

update_el () {
	if [ -x /opt/securestack/clear_logs.sh ]; then rm -rf /opt/securestack/clear_logs.sh; fi
	if [ $role = 'server' ] && [ ! -d /opt/securestack/bin/ansible/ ]; then git clone https://github.com/ansible/ansible.git --recursive /opt/securestack/bin/ansible/;fi
	if [ $role = 'server' ]; then 
		grep "source /opt/securestack/bin/ansible/hacking/env-setup" ~/.bash_profile || echo 'source /opt/securestack/bin/ansible/hacking/env-setup &> /dev/null' >> /opt/securestack/.bash_profile;
		source /opt/securestack/bin/ansible/hacking/env-setup &> /dev/null;
	fi
	if [ -x /etc/yum.repos.d/wazuh.repo ]; then sudo sed -i 's/enabled=1/enabled=0/g' /etc/yum.repos.d/wazuh.repo;fi
	if [ -x /etc/yum.repos.d/elastic.repo ]; then sudo sed -i 's/enabled=1/enabled=0/g' /etc/yum.repos.d/elastic.repo;fi
        cd /opt/securestack && git pull --quiet
        if [ $(yum check-update --quiet |wc -l) != 0 ]; then
	echo "******************************************************************************"
        echo "There are $(yum check-update --quiet |wc -l) packages that need to be updated."
                read -p "Do you want to update your operating system now? [y/n]  " updatenow
                case "$updatenow" in
                        [yY][eE][sS]|[yY])
                                sudo yum update -y
                        ;;
                        *)
                                echo "Not updating operating system."
                        ;;
                esac
        else echo "Your operating system is up to date"
        fi
	echo "                                       "
}

update_ubuntu () {
        if [ -x /opt/securestack/clear_logs.sh ]; then rm -rf /opt/securestack/clear_logs.sh; fi
        if [ $role = 'server' ] && [ ! -d /opt/securestack/bin/ansible/ ]; then git clone https://github.com/ansible/ansible.git --recursive /opt/securestack/bin/ansible/;fi
        if [ $role = 'server' ]; then
                grep "source /opt/securestack/bin/ansible/hacking/env-setup" ~/.bash_profile || echo 'source /opt/securestack/bin/ansible/hacking/env-setup' >> /opt/securestack/.bash_profile;
                source /opt/securestack/bin/ansible/hacking/env-setup;
        fi
        cd /opt/securestack && git pull --quiet
	sudo apt-get update
        sudo /usr/lib/update-notifier/apt-check --human-readable
        echo "******************************************************************************"
        read -p "Do you want to update your operating system now? [y/n]  " updatenow
                case "$updatenow" in
                        [yY][eE][sS]|[yY])
                                sudo apt-get upgrade
                        ;;
                        *)
                                echo "Not updating operating system."
                        ;;
                esac
        echo "                                       "
}

elasticsearch () {
### this section needs to show all indices and their size. additionally it needs to remove or prune existing indices. ###
yellow_alert=$(curl -s -X GET "localhost:9200/_cat/indices?v&health=yellow" | grep -v ^"health status"| wc -l)
green_alert=$(curl -s -X GET "localhost:9200/_cat/indices?v&health=green" | grep -v ^"health status"| wc -l)
red_alert=$(curl -s -X GET "localhost:9200/_cat/indices?v&health=red" | grep -v ^"health status"| wc -l)
	case "$2" in
            [lL][iI][sS][tT]|[lL])
                curl -X GET "localhost:9200/_cat/indices?v";
                ;;
            [pP][rR][uU][nN][eE]|[pP])
                echo "******************************************************************************"
        		read -p "Do you want to prune all metricbeat indices? This is usually enough to make Elasticsearch healthy. [y/n]  " prune_metric
                		case "$prune_metric" in
                        		[yY][eE][sS]|[yY])
                               		 	curl -s -X DELETE "localhost:9200/metricbeat-*"
                        		;;
                        		*)
                                		echo "Not pruning all metricbeat indices";
                        		;;
                		esac
	
                ;;
            [iI][nN][fF][oO]|[iI])
                echo "There are $green_alerts GREEN indices"
                echo "There are $yellow_alerts YELLOW indices"
                echo "There are $red_alerts RED indices"
                ;;
            *)
                echo "Must supply verb.  Example:  securestack elasticsearch (list|prune|info)"; exit 0
                ;;
        esac
}	


# Variables go here #
sshome=/opt/securestack/

# Find version of operating system
if hash lsb_release 2>/dev/null; then
        os_ver=$(lsb_release -is);
elif [ -f /etc/redhat-release ]; then os_ver=$(awk '{print $1}' /etc/redhat-release);
elif [ -f /etc/debian-version ]; then os_ver=Ubuntu;
fi
	
# Find securestack_role from securstack.yml file
if [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 server) -eq 1 ];
        then role='server';
elif [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 hardened) -eq 1 ];
        then role='hardened';
elif [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 naked) -eq 1 ];
        then role='naked';
else role='hardened';
fi

case "$1" in

help)  help
    ;;
stop)  if [ $os_ver = "Ubuntu" ]; then stop_ubuntu; else stop_el; fi
    ;;
start)  start
    ;;
configure)  if [ $role = 'server' ]; then configure_networking_server; create_user; elif [ $role = 'hardened' ]; then configure_networking_base;fi; configure_apps
    ;;
configure_network)  if [ $role = 'server' ]; then configure_networking_server; else configure_networking_base;fi
    ;;
configure_apps)  configure_apps
    ;;
agent)  agent $@
    ;;
create_user) create_user
    ;;
provision) provision $@
    ;;
elasticsearch) elasticsearch $@
    ;;
mfa) mfa
    ;;
update)  if [ $os_ver = "Ubuntu" ]; then update_ubuntu; else update_el; fi
    ;;
status)  status $@
    ;;
*)  echo "SecureStack copyright 2017 - Paul McCarty"
    echo "Usage: securestack (configure|stop|start|agent|configure_network|configure_apps|create_user|update)    "
    echo " "
    exit 1
   ;;
esac

