#!/bin/bash
# Written by Paul McCarty <paulm@securestack.com.au> #

stop () {
	sudo /var/ossec/bin/ossec-control stop
	# Daemons to manage go here #
	daemons=(
		wazuh-manager
		fail2ban
        	filebeat
        	metricbeat
		logstash
		kibana
		elasticsearch
		maldet
                clamd@scan
                wazuh-api
	)

	for i in "${daemons[@]}"
	do
        	sudo rpm -qa | grep -q $i && echo "Disabling $i" && sudo systemctl stop $i && sudo systemctl disable $i
	done
	sudo rpm -qa | grep -q clamav-scanner && echo "Disabling clamd@scan" && sudo systemctl stop clamd@scan && sudo systemctl disable clamd@scan
}

start () {
	if [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 server) -eq 1 ]; then
		echo "SecureStack Role is SERVER"
		echo "Starting Wazuh, Elasticsearch, Logstash, Kibana, Filebeat and Metricbeat"
        	sudo systemctl start wazuh-manager && systemctl enable wazuh-manager
        	sudo systemctl start wazuh-api && systemctl enable wazuh-api
        	sudo systemctl start elasticsearch && systemctl enable elasticsearch
        	sudo systemctl start logstash && systemctl enable logstash
        	sudo systemctl start kibana && systemctl enable kibana 
        	sudo systemctl start filebeat && systemctl enable filebeat
        	sudo systemctl start metricbeat && systemctl enable metricbeat
	elif [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 hardened) -eq 1 ]; then
		echo "SecureStack Role is STANDARD"
			if [ $(grep 'fail2ban:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
				echo "Enabling fail2ban..." && sudo systemctl start fail2ban && sudo systemctl enable fail2ban
			else echo "Disabling fail2ban..." && sudo systemctl stop fail2ban && sudo systemctl disable fail2ban
			fi
			if [ $(grep 'clamav:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                        	echo "Enabling clamav..." && sudo systemctl start clamd@scan && sudo systemctl enable clamd@scan 
			else echo "Disabling clamav..." && sudo systemctl stop clamd@scan && sudo systemctl disable clamd@scan
			fi
			if [ $(grep 'maldet:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                                echo "Enabling Linux Malware Detect..." && sudo systemctl start maldet && sudo systemctl enable maldet
                        else echo "Disabling maldet..." && sudo systemctl stop maldet && sudo systemctl disable maldet
                        fi	
			if [ $(grep 'metricbeat:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                                echo "Enabling Metricbeat..." && sudo systemctl start metricbeat && sudo systemctl enable metricbeat
                        else echo "Disabling metricbeat..." && sudo systemctl stop metricbeat && sudo systemctl disable metricbeat
                        fi
			if [ $(grep 'filebeat:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                                echo "Enabling Filebeat..." && sudo systemctl start filebeat && sudo systemctl enable filebeat
                        else echo "Disabling Filebeat..." && sudo systemctl stop filebeat && sudo systemctl disable filebeat
                        fi
		
	elif [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 naked) -eq 1 ]; then
        	echo "SecureStack Role is NAKED"
        	echo "Not doing anything."
	fi
}

configure_networking () {
	echo "############ local_net section #######################################"
        echo "What subnets do you want to have access to this SecureStack server?"
	echo "If you are deploying to AWS this is usually the main IPv4 CIDR block attached to your VPC"
	echo "or you can specify individual subnets but this will limit what instances can talk to this"
	echo "SecureStack server."
        echo "Please include all networks that will be managed by this particular instance of SecureStack."
	echo "Enter subnets here:  "; read -a local_net

	echo "############ white_list section ######################################"
	echo "This is where you define what IP addresses or networks you want to have administrative"
	echo "access to this SecureStack server.  This access is limited to tcp 5601 for Kibana and"
	echo "tcp 22 for ssh.  Please be careful as you can lock yourself out of your server if you"
	echo "enter the wrong values here.  You can cancel by hitting Ctrl-C now which will leave ssh"
	echo "open but you won't be able to use the web UI until you define this access."
	echo "---- Hit Ctrl-C now to exit or any key to continue -------------------"; read 
        echo "Define your whitelist ips here: "; read -a white_list
	echo "Deleting existing firewall rules..."
	sudo ufw reset
	sudo ufw enable

        for subnets in ${local_net[@]}
        do
                sudo ufw allow proto tcp from $local_net to any port 1514
                sudo ufw allow proto tcp from $local_net to any port 1515
        done

	for ip in ${white_list[@]}
	do
  		sudo ufw allow proto tcp from $ip to any port 22
  		sudo ufw allow proto tcp from $ip to any port 5601
	done

	echo "Removing inital ssh rule..."
	sudo ufw delete 1
}

configure_apps () {
    	read -p "Do you want to enable clamav anti-virus?  [y/N] : " clamav_ans
        read -p "Do you want to enable Linux Malware Detect (LMD/maldet)?  [y/N] : " maldet_ans
        read -p "Do you want to enable fail2ban?  [Y/n] : " fail2ban_ans
        read -p "Do you want to enable Metricbeat?  [y/N] : " metricbeat_ans
        read -p "Do you want to enable Filebeat?  [y/N] : " filebeat_ans
	#read -p "Do you want to enable Web Application Firewall? [y/N] " waf_ans
	#read -p "Do you want to enable Rootkit Hunter? [Y/n] " rkhunter_ans
	
	# clamav section
	case "$clamav_av" in
    		[yY][eE][sS]|[yY]) 
        		sed -i "s/^clamav:.*/clamav: 'enabled'/g" /opt/securestack/securestack.yml
        		;;
    		*)
        		sed -i "s/^clamav:.*/clamav: 'disabled'/g" /opt/securestack/securestack.yml
        		;;
	esac
	
	# maldet section
        case "$maldet_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^maldet:.*/maldet: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^maldet:.*/maldet: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

        # fail2ban section
        case "$fail2ban_av" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^fail2ban:.*/fail2ban: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^fail2ban:.*/fail2ban: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

        # metricbeat section
        case "$metricbeat_av" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^metricbeat:.*/metricbeat: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^metricbeat:.*/metricbeat: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

	# filebeat section
        case "$filebeat_av" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^filebeat:.*/filebeat: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^filebeat:.*/filebeat: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac
	
		
}

update () {
	cd /opt/securestack && git pull
}

# Variables go here #
home=/opt/securestack/

case "$1" in

help)  help
    ;;
stop)  stop
    ;;
start)  start
    ;;
configure)  configure
    ;;
update)  update
    ;;
status)  status $@
    ;;
*)  echo "SecureStack copyright 2017 - Paul McCarty"
    echo "Usage: securestack (configure|stop|start|role)    "
    echo " "
    exit 1
   ;;
esac

