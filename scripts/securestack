#!/bin/bash
# Written by Paul McCarty <paulm@securestack.com.au> #

stop () {
	sudo /var/ossec/bin/ossec-control stop
	# Daemons to manage go here #
	daemons=(
		wazuh-manager
		wazuh-agent
		fail2ban
        	filebeat
        	metricbeat
		logstash
		kibana
		elasticsearch
		maldet
                clamd@scan
		nginx
                wazuh-api
	)

	for i in "${daemons[@]}"
	do
        	sudo rpm -qa | grep -q $i && echo "Disabling $i" && sudo systemctl stop $i && sudo systemctl disable $i
	done
	sudo rpm -qa | grep -q clamav-scanner && echo "Disabling clamd@scan" && sudo systemctl stop clamd@scan && sudo systemctl disable clamd@scan
}

start () {
	if [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 server) -eq 1 ]; then
		echo "SecureStack Role is SERVER"
		echo "Starting Wazuh, Elasticsearch, Logstash, Kibana, Filebeat and Metricbeat"
        	sudo systemctl start wazuh-manager && sudo systemctl enable wazuh-manager
        	sudo systemctl start wazuh-api && sudo systemctl enable wazuh-api
        	sudo systemctl start nginx && sudo systemctl enable nginx
        	sudo systemctl start elasticsearch && sudo systemctl enable elasticsearch
        	sudo systemctl start logstash && sudo systemctl enable logstash
        	sudo systemctl start kibana && sudo systemctl enable kibana 
        	sudo systemctl start filebeat && sudo systemctl enable filebeat
        	sudo systemctl start metricbeat && sudo systemctl enable metricbeat
	elif [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 hardened) -eq 1 ]; then
		echo "SecureStack Role is STANDARD"
		echo "Starting wazuh-agent..."; sudo systemctl start wazuh-agent && sudo systemctl enable wazuh-agent
			if [ $(grep 'fail2ban:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
				echo "Enabling fail2ban..." && sudo systemctl start fail2ban && sudo systemctl enable fail2ban
			else echo "Disabling fail2ban..." && sudo systemctl stop fail2ban && sudo systemctl disable fail2ban
			fi
			if [ $(grep 'clamav:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                        	echo "Enabling clamav..." && sudo systemctl start clamd@scan && sudo systemctl enable clamd@scan 
			else echo "Disabling clamav..." && sudo systemctl stop clamd@scan && sudo systemctl disable clamd@scan
			fi
			if [ $(grep 'maldet:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
				echo "Adding /mnt /media /opt/securestack to maldet monitor dirs." && sudo /usr/local/sbin/maldet --monitor /mnt /media /opt/securestack
                                echo "Enabling Linux Malware Detect..." && sudo systemctl start maldet && sudo systemctl enable maldet
                        else echo "Disabling maldet..." && sudo systemctl stop maldet && sudo systemctl disable maldet
                        fi	
			if [ $(grep 'metricbeat:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                                echo "Enabling Metricbeat..." && sudo systemctl start metricbeat && sudo systemctl enable metricbeat
                        else echo "Disabling metricbeat..." && sudo systemctl stop metricbeat && sudo systemctl disable metricbeat
                        fi
			if [ $(grep 'filebeat:' ./securestack.yml | grep -i -cim1 enabled) -eq 1 ]; then
                                echo "Enabling Filebeat..." && sudo systemctl start filebeat && sudo systemctl enable filebeat
                        else echo "Disabling Filebeat..." && sudo systemctl stop filebeat && sudo systemctl disable filebeat
                        fi
		
	elif [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 naked) -eq 1 ]; then
        	echo "SecureStack Role is NAKED"
        	echo "Not doing anything."
	fi
	
	# Get IP information
	echo "You should now be able to connect to SecureStack Server.  Best practice is to NOT allow http to the internet."
	echo "In which case you would connect to this server at http://$(ifconfig eth0|grep inet|awk '{print $2}')"
	echo "If for whatever reason you have allowed http access from the internet (WHICH WE DON'T SUGGEST YOU DO)"
	echo "You can connect to this server at http://$(curl icanhazip)"
	echo "Your internal IP address is = $(ifconfig eth0|grep inet|awk '{print $2}')"
	echo "Your public IP address is = $(curl icanhazip)"
	echo "Username is securestack and password is ?? "
}

configure_networking_server () {
	echo "******************************************************************************"
	echo "############ local_net section #######################################"
        echo "What subnets do you want to have access to this SecureStack server?"
	echo "If you are deploying to AWS this is usually the main IPv4 CIDR block attached to your VPC"
	echo "or you can specify individual subnets but this will limit what instances can talk to this"
	echo "SecureStack server."
        echo "Please include all networks that will be managed by this particular instance of SecureStack."
	echo "Enter subnets here:  "; read -a local_net

	echo "******************************************************************************"
	echo "############ white_list section ######################################"
	echo "This is where you define what IP addresses or networks you want to have administrative"
	echo "access to this SecureStack server.  This access is limited to http for nginx and"
	echo "tcp 22 for ssh.  Please be careful as you can lock yourself out of your server if you"
	echo "enter the wrong values here.  You can cancel by hitting Ctrl-C now which will leave ssh"
	echo "open but you won't be able to use the web UI until you define this access."
	echo "---- Hit Ctrl-C now to exit or any key to continue -------------------"; read 
        echo "Define your whitelist ips here: "; read -a white_list
	echo "******************************************************************************"
	echo "Deleting existing firewall rules..."
	sudo ufw --force reset
	sudo ufw --force enable
	echo "******************************************************************************"

        for subnets in ${local_net[@]}
        do
                sudo ufw allow proto tcp from $subnets to any port 1514
                sudo ufw allow proto tcp from $subnets to any port 1515
        done

	for ip in ${white_list[@]}
	do
  		sudo ufw allow proto tcp from $ip to any port 22
  		sudo ufw allow proto tcp from $ip to any port 80
	done

	echo "******************************************************************************"
	echo "Removing inital ssh rule..."
	sudo ufw --force delete 1
	echo "******************************************************************************"
}

configure_networking_base () {
        echo "******************************************************************************"
        echo "############ white_list section ######################################"
        echo "This is where you define what IP addresses or networks you want to have administrative"
        echo "access to this SecureStack server.  This access is limited to"
        echo "tcp 22 for ssh.  Please be careful as you can lock yourself out of your server if you"
        echo "enter the wrong values here.  You can cancel by hitting Ctrl-C now which will leave ssh"
        echo "open but you won't be able to use the web UI until you define this access."
        echo "---- Hit Ctrl-C now to exit or any key to continue -------------------"; read
        echo "Define your whitelist ips here: "; read -a white_list
        echo "******************************************************************************"
        echo "Deleting existing firewall rules..."
        sudo ufw --force reset
        sudo ufw --force enable
        echo "******************************************************************************"

        for ip in ${white_list[@]}
        do
                sudo ufw allow proto tcp from $ip to any port 22
                sudo ufw allow proto tcp from $ip to any port 80
        done

        echo "******************************************************************************"
        echo "Removing inital ssh rule..."
        sudo ufw --force delete 1
        echo "******************************************************************************"
}

newuser () {
	read -p "Do you want to create a new user for the web ui? [y/N] : " nginx_create
        case "$nginx_create" in
                [yY][eE][sS]|[yY])
			read -p "What is the new username? " nginx_user
                        echo "Enter the new password? "; read -s nginx_pass
                        sudo htpasswd -cb /etc/nginx/htpasswd.users $nginx_user $nginx_pass || echo "No htpasswd found.  This command only works on Server instances"
                        unset nginx_pass
                        ;;
                *)
                        echo "Cancelling new user creation."
                        ;;
        esac

	#nginx_pass=$(tr -cd '[:alnum:]' < /dev/urandom | fold -w64 | head -n1) 
}	

configure_apps () {
	echo "******************************************************************************"
    	read -p "Do you want to enable clamav anti-virus?  [y/N] : " clamav_ans
        read -p "Do you want to enable Linux Malware Detect (LMD/maldet)?  [y/N] : " maldet_ans
        read -p "Do you want to enable fail2ban?  [Y/n] : " fail2ban_ans
        read -p "Do you want to enable Metricbeat?  [y/N] : " metricbeat_ans
        read -p "Do you want to enable Filebeat?  [y/N] : " filebeat_ans
	#read -p "Do you want to enable Web Application Firewall? [y/N] " waf_ans
	#read -p "Do you want to enable Rootkit Hunter? [Y/n] " rkhunter_ans
	echo "******************************************************************************"
	# clamav section
	case "$clamav_ans" in
    		[yY][eE][sS]|[yY]) 
        		sed -i "s/^clamav:.*/clamav: 'enabled'/g" /opt/securestack/securestack.yml
        		;;
    		*)
        		sed -i "s/^clamav:.*/clamav: 'disabled'/g" /opt/securestack/securestack.yml
        		;;
	esac
	
	# maldet section
        case "$maldet_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^maldet:.*/maldet: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^maldet:.*/maldet: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

        # fail2ban section
        case "$fail2ban_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^fail2ban:.*/fail2ban: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^fail2ban:.*/fail2ban: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

        # metricbeat section
        case "$metricbeat_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^metricbeat:.*/metricbeat: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^metricbeat:.*/metricbeat: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac

	# filebeat section
        case "$filebeat_ans" in
                [yY][eE][sS]|[yY])
                        sed -i "s/^filebeat:.*/filebeat: 'enabled'/g" /opt/securestack/securestack.yml
                        ;;
                *)
                        sed -i "s/^filebeat:.*/filebeat: 'disabled'/g" /opt/securestack/securestack.yml
                        ;;
        esac
	
		
}

update () {
	if [ -x /opt/securestack/clear_logs.sh ]; then rm -rf /opt/securestack/clear_logs.sh; fi
	sudo sed -i 's/enabled=1/enabled=0/g' /etc/yum.repos.d/wazuh.repo && sed -i 's/enabled=1/enabled=0/g' /etc/yum.repos.d/elastic.repo 2>/dev/null
        cd /opt/securestack && git pull --quiet
        if [ $(yum check-update --quiet |wc -l) != 0 ]; then
	echo "******************************************************************************"
        echo "There are $(yum check-update --quiet |wc -l) packages that need to be updated."
                read -p "Do you want to update your operating system now? [y/n]  " updatenow
                case "$updatenow" in
                        [yY][eE][sS]|[yY])
                                sudo yum update -y
                        ;;
                        *)
                                echo "Not updating operating system."
                        ;;
                esac
        else echo "Your operating system is up to date"
        fi
	echo "                                       "
}


# Variables go here #
sshome=/opt/securestack/

case "$1" in

help)  help
    ;;
stop)  stop
    ;;
start)  start
    ;;
configure)  configure_networking; configure_apps
    ;;
configure_network)  if [ $(grep 'securestack_role:' ./securestack.yml | grep -i -cim1 server) -eq 1 ]; then configure_networking_server; else configure_networking_base;fi
    ;;
configure_apps)  configure_apps
    ;;
newuser) newuser 
    ;;
update)  update
    ;;
status)  status $@
    ;;
*)  echo "SecureStack copyright 2017 - Paul McCarty"
    echo "Usage: securestack (configure|stop|start|role)    "
    echo " "
    exit 1
   ;;
esac

